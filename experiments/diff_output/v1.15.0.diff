1,2c1
< SciPy 1.15.0 Release Notes
< =====================
---
> # SciPy 1.15.0 Release Notes
4,13c3
< SciPy `1.15.0` is the culmination of `6` months of hard work. It contains
< many new features, numerous bug-fixes, improved test coverage and better
< documentation. There have been a number of deprecations and API changes
< in this release, which are documented below. All users are encouraged to
< upgrade to this release, as there are a large number of bug-fixes and
< optimizations. Before upgrading, we recommend that users check that
< their own code does not use deprecated SciPy functionality (to do so,
< run your code with ``python -Wd`` and check for ``DeprecationWarning`` s).
< Our development attention will now shift to bug-fix releases on the
< 1.15.x branch, and on adding new features on the main branch.
---
> SciPy 1.15.0 is the culmination of 6 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with `python -Wd` and check for `DeprecationWarning` s). Our development attention will now shift to bug-fix releases on the 1.15.x branch, and on adding new features on the main branch. This release requires Python 3.10-3.13 and NumPy 1.23.5 or greater.
15c5
< This release requires Python `3.10-3.13` and NumPy `1.23.5` or greater.
---
> ## Highlights of this release
16a7,16
> -   Sparse arrays are now fully functional for 1-D and 2-D arrays. We recommend that all new code use sparse arrays instead of sparse matrices and that developers start to migrate their existing code from sparse matrix to sparse array: [Migration from spmatrix to sparray](https://scipy.github.io/devdocs/reference/sparse.migration_to_sparray.html#migration-to-sparray). Both `sparse.linalg` and `sparse.csgraph` work with either sparse matrix or sparse array and work internally with sparse array.
> -   Sparse arrays now provide basic support for n-D arrays in the COO format including `add`, `subtract`, `reshape`, `transpose`, `matmul`, `dot`, `tensordot` and others. More functionality is coming in future releases.
> -   Preliminary support for free-threaded Python 3.13.
> -   New probability distribution features in [`scipy.stats`](https://scipy.github.io/devdocs/reference/stats.html#module-scipy.stats) can be used to improve the speed and accuracy of existing continuous distributions and perform new probability calculations.
> -   Several new features support vectorized calculations with Python Array API Standard compatible input (see "Array API Standard Support" below):
>     -   [`scipy.differentiate`](https://scipy.github.io/devdocs/reference/differentiate.html#module-scipy.differentiate) is a new top-level submodule for accurate estimation of derivatives of black box functions.
>     -   [`scipy.optimize.elementwise`](https://scipy.github.io/devdocs/reference/optimize.elementwise.html#module-scipy.optimize.elementwise) contains new functions for root-finding and minimization of univariate functions.
>     -   [`scipy.integrate`](https://scipy.github.io/devdocs/reference/integrate.html#module-scipy.integrate) offers new functions `cubature`, `tanhsinh`, and `nsum` for multivariate integration, univariate integration, and univariate series summation, respectively.
> -   [`scipy.interpolate.AAA`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.AAA.html#scipy.interpolate.AAA) adds the AAA algorithm for barycentric rational approximation of real or complex functions.
> -   [`scipy.special`](https://scipy.github.io/devdocs/reference/special.html#module-scipy.special) adds new functions offering improved Legendre function implementations with a more consistent interface.
18,19c18
< Highlights of this release
< ===================
---
> ## New features
21,36c20
< - Sparse arrays are now fully functional for 1-D and 2-D arrays. We recommend
<   that all new code use sparse arrays instead of sparse matrices and that
<   developers start to migrate their existing code from sparse matrix to sparse
<   array: [`migration_to_sparray`](https://scipy.github.io/devdocs/reference/sparse.migration_to_sparray.html). Both ``sparse.linalg`` and ``sparse.csgraph``
<   work with either sparse matrix or sparse array and work internally with
<   sparse array.
< - Sparse arrays now provide basic support for n-D arrays in the COO format
<   including ``add``, ``subtract``, ``reshape``, ``transpose``, ``matmul``,
<   ``dot``, ``tensordot`` and others. More functionality is coming in future
<   releases.
< - Preliminary support for free-threaded Python 3.13.
< - New probability distribution features in `scipy.stats` can be used to improve
<   the speed and accuracy of existing continuous distributions and perform new
<   probability calculations.
< - Several new features support vectorized calculations with Python Array API
<   Standard compatible input (see "Array API Standard Support" below):
---
> ### `scipy.differentiate` introduction
38,44c22
<   - `scipy.differentiate` is a new top-level submodule for accurate
<     estimation of derivatives of black box functions.
<   - `scipy.optimize.elementwise` contains new functions for root-finding and
<     minimization of univariate functions.
<   - `scipy.integrate` offers new functions ``cubature``, ``tanhsinh``, and
<     ``nsum`` for multivariate integration, univariate integration, and
<     univariate series summation, respectively.
---
> The new [`scipy.differentiate`](https://scipy.github.io/devdocs/reference/differentiate.html#module-scipy.differentiate) sub-package contains functions for accurate estimation of derivatives of black box functions.
46,49c24,26
< - `scipy.interpolate.AAA` adds the AAA algorithm for barycentric rational
<   approximation of real or complex functions.
< - `scipy.special` adds new functions offering improved Legendre function
<   implementations with a more consistent interface.
---
> -   Use [`scipy.differentiate.derivative`](https://scipy.github.io/devdocs/reference/generated/scipy.differentiate.derivative.html#scipy.differentiate.derivative) for first-order derivatives of scalar-in, scalar-out functions.
> -   Use [`scipy.differentiate.jacobian`](https://scipy.github.io/devdocs/reference/generated/scipy.differentiate.jacobian.html#scipy.differentiate.jacobian) for first-order partial derivatives of vector-in, vector-out functions.
> -   Use [`scipy.differentiate.hessian`](https://scipy.github.io/devdocs/reference/generated/scipy.differentiate.hessian.html#scipy.differentiate.hessian) for second-order partial derivatives of vector-in, scalar-out functions.
50a28
> All functions use high-order finite difference rules with adaptive (real) step size. To facilitate batch computation, these functions are vectorized and support several Array API compatible array libraries in addition to NumPy (see "Array API Standard Support" below).
51a30
> ### `scipy.integrate` improvements
53,54c32,36
< New features
< ===========
---
> -   The new [`scipy.integrate.cubature`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.cubature.html#scipy.integrate.cubature) function supports multidimensional integration, and has support for approximating integrals with one or more sets of infinite limits.
> -   [`scipy.integrate.tanhsinh`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.tanhsinh.html#scipy.integrate.tanhsinh) is now exposed for public use, allowing evaluation of a convergent integral using tanh-sinh quadrature.
> -   [`scipy.integrate.nsum`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.nsum.html#scipy.integrate.nsum) evaluates finite and infinite series and their logarithms.
> -   [`scipy.integrate.lebedev_rule`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.lebedev_rule.html#scipy.integrate.lebedev_rule) computes abscissae and weights for integration over the surface of a sphere.
> -   The `QUADPACK` Fortran77 package has been ported to C.
56,59c38
< ``scipy.differentiate`` introduction
< ====================================
< The new `scipy.differentiate` sub-package contains functions for accurate
< estimation of derivatives of black box functions.
---
> ### `scipy.interpolate` improvements
61,66c40,43
< * Use `scipy.differentiate.derivative` for first-order derivatives of
<   scalar-in, scalar-out functions.
< * Use `scipy.differentiate.jacobian` for first-order partial derivatives of
<   vector-in, vector-out functions.
< * Use `scipy.differentiate.hessian` for second-order partial derivatives of
<   vector-in, scalar-out functions.
---
> -   [`scipy.interpolate.AAA`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.AAA.html#scipy.interpolate.AAA) adds the AAA algorithm for barycentric rational approximation of real or complex functions.
> -   [`scipy.interpolate.FloaterHormannInterpolator`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.FloaterHormannInterpolator.html#scipy.interpolate.FloaterHormannInterpolator) adds barycentric rational interpolation.
> -   New functions [`scipy.interpolate.make_splrep`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.make_splrep.html#scipy.interpolate.make_splrep) and [`scipy.interpolate.make_splprep`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.make_splprep.html#scipy.interpolate.make_splprep) implement construction of smoothing splines. The algorithmic content is equivalent to FITPACK (`splrep` and `splprep` functions, and `*UnivariateSpline` classes) and the user API is consistent with `make_interp_spline`: these functions receive data arrays and return a [`scipy.interpolate.BSpline`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.BSpline.html#scipy.interpolate.BSpline) instance.
> -   New generator function [`scipy.interpolate.generate_knots`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.generate_knots.html#scipy.interpolate.generate_knots) implements the FITPACK strategy for selecting knots of a smoothing spline given the smoothness parameter, `s`. The function exposes the internal logic of knot selection that `splrep` and `*UnivariateSpline` was using.
68,71c45
< All functions use high-order finite difference rules with adaptive (real)
< step size. To facilitate batch computation, these functions are vectorized
< and support several Array API compatible array libraries in addition to NumPy
< (see "Array API Standard Support" below).
---
> ### `scipy.linalg` improvements
73,84c47,55
< ``scipy.integrate`` improvements
< ================================
< - The new `scipy.integrate.cubature` function supports multidimensional
<   integration, and has support for approximating integrals with
<   one or more sets of infinite limits.
< - `scipy.integrate.tanhsinh` is now exposed for public use, allowing
<   evaluation of a convergent integral using tanh-sinh quadrature.
< - `scipy.integrate.nsum` evaluates finite and infinite series and their
<   logarithms.
< - `scipy.integrate.lebedev_rule` computes abscissae and weights for
<   integration over the surface of a sphere.
< - The ``QUADPACK`` Fortran77 package has been ported to C.
---
> -   [`scipy.linalg.interpolative`](https://scipy.github.io/devdocs/reference/linalg.interpolative.html#module-scipy.linalg.interpolative) Fortran77 code has been ported to Cython.
> -   [`scipy.linalg.solve`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.solve.html#scipy.linalg.solve) supports several new values for the `assume_a` argument, enabling faster computation for diagonal, tri-diagonal, banded, and triangular matrices. Also, when `assume_a` is left unspecified, the function now automatically detects and exploits diagonal, tri-diagonal, and triangular structures.
> -   [`scipy.linalg`](https://scipy.github.io/devdocs/reference/linalg.html#module-scipy.linalg) matrix creation functions ([`scipy.linalg.circulant`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.circulant.html#scipy.linalg.circulant), [`scipy.linalg.companion`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.companion.html#scipy.linalg.companion), [`scipy.linalg.convolution_matrix`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.convolution_matrix.html#scipy.linalg.convolution_matrix), [`scipy.linalg.fiedler`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.fiedler.html#scipy.linalg.fiedler), [`scipy.linalg.fiedler_companion`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.fiedler_companion.html#scipy.linalg.fiedler_companion), and [`scipy.linalg.leslie`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.leslie.html#scipy.linalg.leslie)) now support batch matrix creation.
> -   [`scipy.linalg.funm`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.funm.html#scipy.linalg.funm) is faster.
> -   [`scipy.linalg.orthogonal_procrustes`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.orthogonal_procrustes.html#scipy.linalg.orthogonal_procrustes) now supports complex input.
> -   Wrappers for the following LAPACK routines have been added in [`scipy.linalg.lapack`](https://scipy.github.io/devdocs/reference/linalg.lapack.html#module-scipy.linalg.lapack): `?lantr`, `?sytrs`, `?hetrs`, `?trcon`, and `?gtcon`.
> -   [`scipy.linalg.expm`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.expm.html#scipy.linalg.expm) was rewritten in C.
> -   [`scipy.linalg.null_space`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.null_space.html#scipy.linalg.null_space) now accepts the new arguments `overwrite_a`, `check_finite`, and `lapack_driver`.
> -   `id_dist` Fortran code was rewritten in Cython.
86,101c57
< ``scipy.interpolate`` improvements
< ==================================
< - `scipy.interpolate.AAA` adds the AAA algorithm for barycentric rational
<   approximation of real or complex functions.
< - `scipy.interpolate.FloaterHormannInterpolator` adds barycentric rational
<   interpolation.
< - New functions `scipy.interpolate.make_splrep` and
<   `scipy.interpolate.make_splprep` implement construction of smoothing splines.
<   The algorithmic content is equivalent to FITPACK (``splrep`` and ``splprep``
<   functions, and ``*UnivariateSpline`` classes) and the user API is consistent
<   with ``make_interp_spline``: these functions receive data arrays and return
<   a `scipy.interpolate.BSpline` instance.
< - New generator function `scipy.interpolate.generate_knots` implements the
<   FITPACK strategy for selecting knots of a smoothing spline given the
<   smoothness parameter, ``s``. The function exposes the internal logic of knot
<   selection that ``splrep`` and ``*UnivariateSpline`` was using.
---
> ### `scipy.ndimage` improvements
102a59,61
> -   Several additional filtering functions now support an `axes` argument that specifies which axes of the input filtering is to be performed on. These include `correlate`, `convolve`, `generic_laplace`, `laplace`, `gaussian_laplace`, `derivative2`, `generic_gradient_magnitude`, `gaussian_gradient_magnitude` and `generic_filter`.
> -   The binary and grayscale morphology functions now support an `axes` argument that specifies which axes of the input filtering is to be performed on.
> -   [`scipy.ndimage.rank_filter`](https://scipy.github.io/devdocs/reference/generated/scipy.ndimage.rank_filter.html#scipy.ndimage.rank_filter) time complexity has improved from `n` to `log(n)`.
104,125c63
< ``scipy.linalg`` improvements
< =============================
< - `scipy.linalg.interpolative` Fortran77 code has been ported to Cython.
< - `scipy.linalg.solve` supports several new values for the ``assume_a``
<   argument, enabling faster computation for diagonal, tri-diagonal, banded, and
<   triangular matrices. Also, when ``assume_a`` is left unspecified, the
<   function now automatically detects and exploits diagonal, tri-diagonal,
<   and triangular structures.
< - `scipy.linalg` matrix creation functions (`scipy.linalg.circulant`,
<   `scipy.linalg.companion`, `scipy.linalg.convolution_matrix`,
<   `scipy.linalg.fiedler`, `scipy.linalg.fiedler_companion`, and
<   `scipy.linalg.leslie`) now support batch
<   matrix creation.
< - `scipy.linalg.funm` is faster.
< - `scipy.linalg.orthogonal_procrustes` now supports complex input.
< - Wrappers for the following LAPACK routines have been added in
<   `scipy.linalg.lapack`: ``?lantr``, ``?sytrs``, ``?hetrs``, ``?trcon``,
<   and ``?gtcon``.
< - `scipy.linalg.expm` was rewritten in C.
< - `scipy.linalg.null_space` now accepts the new arguments ``overwrite_a``,
<   ``check_finite``, and ``lapack_driver``.
< - ``id_dist`` Fortran code was rewritten in Cython.
---
> ### `scipy.optimize` improvements
126a65,71
> -   The vendored HiGHS library has been upgraded from `1.4.0` to `1.8.0`, bringing accuracy and performance improvements to solvers.
> -   The `MINPACK` Fortran77 package has been ported to C.
> -   The `L-BFGS-B` Fortran77 package has been ported to C.
> -   The new [`scipy.optimize.elementwise`](https://scipy.github.io/devdocs/reference/optimize.elementwise.html#module-scipy.optimize.elementwise) namespace includes functions `bracket_root`, `find_root`, `bracket_minimum`, and `find_minimum` for root-finding and minimization of univariate functions. To facilitate batch computation, these functions are vectorized and support several Array API compatible array libraries in addition to NumPy (see "Array API Standard Support" below). Compared to existing functions (e.g. [`scipy.optimize.root_scalar`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar) and [`scipy.optimize.minimize_scalar`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar)), these functions can offer speedups of over 100x when used with NumPy arrays, and even greater gains are possible with other Array API Standard compatible array libraries (e.g. CuPy).
> -   [`scipy.optimize.differential_evolution`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution) now supports more general use of `workers`, such as passing a map-like callable.
> -   [`scipy.optimize.nnls`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.nnls.html#scipy.optimize.nnls) was rewritten in Cython.
> -   `HessianUpdateStrategy` now supports `__matmul__`.
128,139c73
< ``scipy.ndimage`` improvements
< ==============================
< - Several additional filtering functions now support an ``axes`` argument
<   that specifies which axes of the input filtering is to be performed on.
<   These include ``correlate``, ``convolve``, ``generic_laplace``, ``laplace``,
<   ``gaussian_laplace``, ``derivative2``, ``generic_gradient_magnitude``,
<   ``gaussian_gradient_magnitude`` and ``generic_filter``.
< - The binary and grayscale morphology functions now support an ``axes``
<   argument that specifies which axes of the input filtering is to be performed
<   on.
< - `scipy.ndimage.rank_filter` time complexity has improved from ``n`` to
<   ``log(n)``.
---
> ### `scipy.signal` improvements
140a75,77
> -   Add functionality of complex-valued waveforms to `signal.chirp()`.
> -   [`scipy.signal.lombscargle`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.lombscargle.html#scipy.signal.lombscargle) has two new arguments, `weights` and `floating_mean`, enabling sample weighting and removal of an unknown y-offset independently for each frequency. Additionally, the `normalize` argument includes a new option to return the complex representation of the amplitude and phase.
> -   New function [`scipy.signal.envelope`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.envelope.html#scipy.signal.envelope) for computation of the envelope of a real or complex valued signal.
141a79
> ### `scipy.sparse` improvements
143,162c81,90
< ``scipy.optimize`` improvements
< ===============================
< - The vendored HiGHS library has been upgraded from ``1.4.0`` to ``1.8.0``,
<   bringing accuracy and performance improvements to solvers.
< - The ``MINPACK`` Fortran77 package has been ported to C.
< - The ``L-BFGS-B`` Fortran77 package has been ported to C.
< - The new `scipy.optimize.elementwise` namespace includes functions
<   ``bracket_root``, ``find_root``, ``bracket_minimum``, and ``find_minimum``
<   for root-finding and minimization of univariate functions. To facilitate
<   batch computation, these functions are vectorized and support several
<   Array API compatible array libraries in addition to NumPy (see
<   "Array API Standard Support" below). Compared to existing functions (e.g.
<   `scipy.optimize.root_scalar` and `scipy.optimize.minimize_scalar`),
<   these functions can offer speedups of over 100x when used with NumPy arrays,
<   and even greater gains are possible with other Array API Standard compatible
<   array libraries (e.g. CuPy).
< - `scipy.optimize.differential_evolution` now supports more general use of
<   ``workers``, such as passing a map-like callable.
< - `scipy.optimize.nnls` was rewritten in Cython.
< - ``HessianUpdateStrategy`` now supports ``__matmul__``.
---
> -   A [migration guide](https://scipy.github.io/devdocs/reference/sparse.migration_to_sparray.html#migration-to-sparray) is now available for moving from sparse.matrix to sparse.array in your code/library.
> -   Sparse arrays now support indexing for 1-D and 2-D arrays. So, sparse arrays are now fully functional for 1-D and 2D.
> -   n-D sparse arrays in COO format can now be constructed, reshaped and used for basic arithmetic.
> -   New functions `sparse.linalg.is_sptriangular` and `sparse.linalg.spbandwidth` mimic the existing dense tools `linalg.is_triangular` and `linalg.bandwidth`.
> -   `sparse.linalg` and `sparse.csgraph` now work with sparse arrays. Be careful that your index arrays are 32-bit. We are working on 64bit support.
> -   The vendored `ARPACK` library has been upgraded to version `3.9.1`.
> -   COO, CSR, CSC and LIL formats now support the `axis` argument for `count_nonzero`.
> -   Sparse arrays and matrices may now raise errors when initialized with incompatible data types, such as `float16`.
> -   `min`, `max`, `argmin`, and `argmax` now support computation over nonzero elements only via the new `explicit` argument.
> -   New functions `get_index_dtype` and `safely_cast_index_arrays` are available to facilitate index array casting in `sparse`.
163a92
> ### `scipy.spatial` improvements
165,174c94
< ``scipy.signal`` improvements
< =============================
< - Add functionality of complex-valued waveforms to ``signal.chirp()``.
< - `scipy.signal.lombscargle` has two new arguments, ``weights`` and
<   ``floating_mean``, enabling sample weighting and removal of an unknown
<   y-offset independently for each frequency. Additionally, the ``normalize``
<   argument includes a new option to return the complex representation of the
<   amplitude and phase.
< - New function `scipy.signal.envelope` for computation of the envelope of a
<   real or complex valued signal.
---
> -   `Rotation.concatenate` now accepts a bare `Rotation` object, and will return a copy of it.
175a96
> ### `scipy.special` improvements
177,204c98,113
< ``scipy.sparse`` improvements
< =============================
< - A [migration guide](https://scipy.github.io/devdocs/reference/sparse.migration_to_sparray.html) is now available for
<   moving from sparse.matrix to sparse.array in your code/library.
< - Sparse arrays now support indexing for 1-D and 2-D arrays. So, sparse
<   arrays are now fully functional for 1-D and 2D.
< - n-D sparse arrays in COO format can now be constructed, reshaped and used
<   for basic arithmetic.
< - New functions ``sparse.linalg.is_sptriangular`` and
<   ``sparse.linalg.spbandwidth`` mimic the existing dense tools
<   ``linalg.is_triangular`` and ``linalg.bandwidth``.
< - ``sparse.linalg`` and ``sparse.csgraph`` now work with sparse arrays. Be
<   careful that your index arrays are 32-bit. We are working on 64bit support.
< - The vendored ``ARPACK`` library has been upgraded to version ``3.9.1``.
< - COO, CSR, CSC and LIL formats now support the ``axis`` argument for
<   ``count_nonzero``.
< - Sparse arrays and matrices may now raise errors when initialized with
<   incompatible data types, such as ``float16``.
< - ``min``, ``max``, ``argmin``, and ``argmax`` now support computation
<   over nonzero elements only via the new ``explicit`` argument.
< - New functions ``get_index_dtype`` and ``safely_cast_index_arrays`` are
<   available to facilitate index array casting in ``sparse``.
< 
< 
< ``scipy.spatial`` improvements
< ==============================
< - ``Rotation.concatenate`` now accepts a bare ``Rotation`` object, and will
<   return a copy of it.
---
> -   New functions offering improved Legendre function implementations with a more consistent interface. See respective docstrings for more information.
>     -   [`scipy.special.legendre_p`](https://scipy.github.io/devdocs/reference/generated/scipy.special.legendre_p.html#scipy.special.legendre_p), [`scipy.special.legendre_p_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.legendre_p_all.html#scipy.special.legendre_p_all)
>     -   [`scipy.special.assoc_legendre_p`](https://scipy.github.io/devdocs/reference/generated/scipy.special.assoc_legendre_p.html#scipy.special.assoc_legendre_p), [`scipy.special.assoc_legendre_p_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.assoc_legendre_p_all.html#scipy.special.assoc_legendre_p_all)
>     -   [`scipy.special.sph_harm_y`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_harm_y.html#scipy.special.sph_harm_y), [`scipy.special.sph_harm_y_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_harm_y_all.html#scipy.special.sph_harm_y_all)
>     -   [`scipy.special.sph_legendre_p`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_legendre_p.html#scipy.special.sph_legendre_p), [`scipy.special.sph_legendre_p_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_legendre_p_all.html#scipy.special.sph_legendre_p_all),
> -   The factorial functions `special.{factorial,factorial2,factorialk}` now offer an extension to the complex domain by passing the kwarg `extend='complex'`. This is opt-in because it changes the values for negative inputs (which by default return 0), as well as for some integers (in the case of `factorial2` and `factorialk`; for more details, check the respective docstrings).
> -   [`scipy.special.zeta`](https://scipy.github.io/devdocs/reference/generated/scipy.special.zeta.html#scipy.special.zeta) now defines the Riemann zeta function on the complex plane.
> -   [`scipy.special.softplus`](https://scipy.github.io/devdocs/reference/generated/scipy.special.softplus.html#scipy.special.softplus) computes the softplus function
> -   The spherical Bessel functions ([`scipy.special.spherical_jn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.spherical_jn.html#scipy.special.spherical_jn), [`scipy.special.spherical_yn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.spherical_yn.html#scipy.special.spherical_yn), [`scipy.special.spherical_in`](https://scipy.github.io/devdocs/reference/generated/scipy.special.spherical_in.html#scipy.special.spherical_in), and [`scipy.special.spherical_kn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.spherical_kn.html#scipy.special.spherical_kn)) now support negative arguments with real dtype.
> -   [`scipy.special.logsumexp`](https://scipy.github.io/devdocs/reference/generated/scipy.special.logsumexp.html#scipy.special.logsumexp) now preserves precision when one element of the sum has magnitude much bigger than the rest.
> -   The accuracy of several functions has been improved:
>     -   [`scipy.special.ncfdtr`](https://scipy.github.io/devdocs/reference/generated/scipy.special.ncfdtr.html#scipy.special.ncfdtr), [`scipy.special.nctdtr`](https://scipy.github.io/devdocs/reference/generated/scipy.special.nctdtr.html#scipy.special.nctdtr), and [`scipy.special.gdtrib`](https://scipy.github.io/devdocs/reference/generated/scipy.special.gdtrib.html#scipy.special.gdtrib) have been improved throughout the domain.
>     -   [`scipy.special.hyperu`](https://scipy.github.io/devdocs/reference/generated/scipy.special.hyperu.html#scipy.special.hyperu) is improved for the case of `b=1`, small `x`, and small `a`.
>     -   [`scipy.special.logit`](https://scipy.github.io/devdocs/reference/generated/scipy.special.logit.html#scipy.special.logit) is improved near the argument `p=0.5`.
>     -   [`scipy.special.rel_entr`](https://scipy.github.io/devdocs/reference/generated/scipy.special.rel_entr.html#scipy.special.rel_entr) is improved when `x/y` overflows, underflows, or is close to `1`.
> -   [`scipy.special.ndtr`](https://scipy.github.io/devdocs/reference/generated/scipy.special.ndtr.html#scipy.special.ndtr) is now more efficient for `sqrt(2)/2 < |x| < 1`.
205a115
> ### `scipy.stats` improvements
207,210c117,142
< ``scipy.special`` improvements
< ==============================
< - New functions offering improved Legendre function implementations with a
<   more consistent interface. See respective docstrings for more information.
---
> -   A new probability distribution infrastructure has been added for the implementation of univariate, continuous distributions. It has several speed, accuracy, memory, and interface advantages compared to the previous infrastructure. See [Random Variable Transition Guide](https://scipy.github.io/devdocs/tutorial/stats/rv_infrastructure.html#rv-infrastructure) for a tutorial.
>     -   Use [`scipy.stats.make_distribution`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.make_distribution.html#scipy.stats.make_distribution) to treat an existing continuous distribution (e.g. [`scipy.stats.norm`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.norm.html#scipy.stats.norm)) with the new infrastructure. This can improve the speed and accuracy of existing distributions, especially those with methods not overridden with distribution-specific formulas.
>     -   [`scipy.stats.Normal`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.Normal.html#scipy.stats.Normal) and [`scipy.stats.Uniform`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.Uniform.html#scipy.stats.Uniform) are pre-defined classes to represent the normal and uniform distributions, respectively. Their interfaces may be faster and more convenient than those produced by `make_distribution`.
>     -   [`scipy.stats.Mixture`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.Mixture.html#scipy.stats.Mixture) can be used to represent mixture distributions.
> -   Instances of [`scipy.stats.Normal`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.Normal.html#scipy.stats.Normal), [`scipy.stats.Uniform`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.Uniform.html#scipy.stats.Uniform), and the classes returned by [`scipy.stats.make_distribution`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.make_distribution.html#scipy.stats.make_distribution) are supported by several new mathematical transformations.
>     -   [`scipy.stats.truncate`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.truncate.html#scipy.stats.truncate) for truncation of the support.
>     -   [`scipy.stats.order_statistic`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.order_statistic.html#scipy.stats.order_statistic) for the order statistics of a given number of IID random variables.
>     -   [`scipy.stats.abs`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.abs.html#scipy.stats.abs), [`scipy.stats.exp`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.exp.html#scipy.stats.exp), and [`scipy.stats.log`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.log.html#scipy.stats.log). For example, `scipy.stats.abs(Normal())` is distributed according to the folded normal and `scipy.stats.exp(Normal())` is lognormally distributed.
> -   The new [`scipy.stats.lmoment`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.lmoment.html#scipy.stats.lmoment) calculates sample l-moments and l-moment ratios. Notably, these sample estimators are unbiased.
> -   [`scipy.stats.chatterjeexi`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.chatterjeexi.html#scipy.stats.chatterjeexi) computes the Xi correlation coefficient, which can detect nonlinear dependence. The function also performs a hypothesis test of independence between samples.
> -   [`scipy.stats.wilcoxon`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.wilcoxon.html#scipy.stats.wilcoxon) has improved method resolution logic for the default `method='auto'`. Other values of `method` provided by the user are now respected in all cases, and the method argument `approx` has been renamed to `asymptotic` for consistency with similar functions. (Use of `approx` is still allowed for backward compatibility.)
> -   There are several new probability distributions:
>     -   [`scipy.stats.dpareto_lognorm`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.dpareto_lognorm.html#scipy.stats.dpareto_lognorm) represents the double Pareto lognormal distribution.
>     -   [`scipy.stats.landau`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.landau.html#scipy.stats.landau) represents the Landau distribution.
>     -   [`scipy.stats.normal_inverse_gamma`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.normal_inverse_gamma.html#scipy.stats.normal_inverse_gamma) represents the normal-inverse-gamma distribution.
>     -   [`scipy.stats.poisson_binom`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.poisson_binom.html#scipy.stats.poisson_binom) represents the Poisson binomial distribution.
> -   Batch calculation with [`scipy.stats.alexandergovern`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.alexandergovern.html#scipy.stats.alexandergovern) and [`scipy.stats.combine_pvalues`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.combine_pvalues.html#scipy.stats.combine_pvalues) is faster.
> -   [`scipy.stats.chisquare`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.chisquare.html#scipy.stats.chisquare) added an argument `sum_check`. By default, the function raises an error when the sum of expected and obseved frequencies are not equal; setting `sum_check=False` disables this check to facilitate hypothesis tests other than Pearson's chi-squared test.
> -   The accuracy of several distribution methods has been improved, including:
>     -   [`scipy.stats.nct`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.nct.html#scipy.stats.nct) method `pdf`
>     -   [`scipy.stats.crystalball`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.crystalball.html#scipy.stats.crystalball) method `sf`
>     -   [`scipy.stats.geom`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.geom.html#scipy.stats.geom) method `rvs`
>     -   [`scipy.stats.cauchy`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.cauchy.html#scipy.stats.cauchy) methods `logpdf`, `pdf`, `ppf` and `isf`
>     -   The `logcdf` and/or `logsf` methods of distributions that do not override the generic implementation of these methods, including [`scipy.stats.beta`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.beta.html#scipy.stats.beta), [`scipy.stats.betaprime`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.betaprime.html#scipy.stats.betaprime), [`scipy.stats.cauchy`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.cauchy.html#scipy.stats.cauchy), [`scipy.stats.chi`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.chi.html#scipy.stats.chi), [`scipy.stats.chi2`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.chi2.html#scipy.stats.chi2), [`scipy.stats.exponweib`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.exponweib.html#scipy.stats.exponweib), [`scipy.stats.gamma`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.gamma.html#scipy.stats.gamma), [`scipy.stats.gompertz`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.gompertz.html#scipy.stats.gompertz), [`scipy.stats.halflogistic`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.halflogistic.html#scipy.stats.halflogistic), [`scipy.stats.hypsecant`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.hypsecant.html#scipy.stats.hypsecant), [`scipy.stats.invgamma`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.invgamma.html#scipy.stats.invgamma), [`scipy.stats.laplace`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.laplace.html#scipy.stats.laplace), [`scipy.stats.levy`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.levy.html#scipy.stats.levy), [`scipy.stats.loggamma`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.loggamma.html#scipy.stats.loggamma), [`scipy.stats.maxwell`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.maxwell.html#scipy.stats.maxwell), [`scipy.stats.nakagami`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.nakagami.html#scipy.stats.nakagami), and [`scipy.stats.t`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.t.html#scipy.stats.t).
> -   [`scipy.stats.qmc.PoissonDisk`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.qmc.PoissonDisk.html#scipy.stats.qmc.PoissonDisk) now accepts lower and upper bounds parameters `l_bounds` and `u_bounds`.
> -   [`scipy.stats.fisher_exact`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.fisher_exact.html#scipy.stats.fisher_exact) now supports two-dimensional tables with shapes other than `(2, 2)`.
212,215c144
<   - `scipy.special.legendre_p`, `scipy.special.legendre_p_all`
<   - `scipy.special.assoc_legendre_p`, `scipy.special.assoc_legendre_p_all`
<   - `scipy.special.sph_harm_y`, `scipy.special.sph_harm_y_all`
<   - `scipy.special.sph_legendre_p`, `scipy.special.sph_legendre_p_all`,
---
> ### Preliminary Support for Free-Threaded CPython 3.13
217,231c146
< - The factorial functions ``special.{factorial,factorial2,factorialk}`` now
<   offer an extension to the complex domain by passing the kwarg
<   ``extend='complex'``. This is opt-in because it changes the values for
<   negative inputs (which by default return 0), as well as for some integers
<   (in the case of ``factorial2`` and ``factorialk``; for more details,
<   check the respective docstrings).
< - `scipy.special.zeta` now defines the Riemann zeta function on the complex
<   plane.
< - `scipy.special.softplus` computes the softplus function
< - The spherical Bessel functions (`scipy.special.spherical_jn`,
<   `scipy.special.spherical_yn`, `scipy.special.spherical_in`, and
<   `scipy.special.spherical_kn`) now support negative arguments with real dtype.
< - `scipy.special.logsumexp` now preserves precision when one element of the
<   sum has magnitude much bigger than the rest.
< - The accuracy of several functions has been improved:
---
> SciPy `1.15` has preliminary support for the free-threaded build of CPython `3.13.` This allows SciPy functionality to execute in parallel with Python threads (see the `threading` stdlib module). This support was enabled by fixing a significant number of thread-safety issues in both pure Python and C/C++/Cython/Fortran extension modules. Wheels are provided on PyPI for this release; NumPy `>=2.1.3` is required at runtime. Note that building for a free-threaded interpreter requires a recent pre-release or nightly for Cython `3.1.0`. Support for free-threaded Python does not mean that SciPy is fully thread-safe. Please see [Thread Safety in SciPy](https://scipy.github.io/devdocs/tutorial/thread_safety.html#scipy-thread-safety) for more details. If you are interested in free-threaded Python, for example because you have a multiprocessing-based workflow that you are interested in running with Python threads, we encourage testing and experimentation. If you run into problems that you suspect are because of SciPy, please open an issue, checking first if the bug also occurs in the "regular" non-free-threaded CPython `3.13` build. Many threading bugs can also occur in code that releases the GIL; disabling the GIL only makes it easier to hit threading bugs.
233,239c148
<   - `scipy.special.ncfdtr`, `scipy.special.nctdtr`, and
<     `scipy.special.gdtrib` have been improved throughout the domain.
<   - `scipy.special.hyperu` is improved for the case of ``b=1``, small ``x``,
<     and small ``a``.
<   - `scipy.special.logit` is improved near the argument ``p=0.5``.
<   - `scipy.special.rel_entr` is improved when ``x/y`` overflows, underflows,
<     or is close to ``1``.
---
> ## Array API Standard Support
241c150
< - `scipy.special.ndtr` is now more efficient for ``sqrt(2)/2 < |x| < 1``.
---
> Experimental support for array libraries other than NumPy has been added to existing sub-packages in recent versions of SciPy. Please consider testing these features by setting an environment variable `SCIPY_ARRAY_API=1` and providing PyTorch, JAX, ndonnx, or CuPy arrays as array arguments. Features with support added for SciPy `1.15.0` include:
243,248c152,169
< ``scipy.stats`` improvements
< ============================
< - A new probability distribution infrastructure has been added for the
<   implementation of univariate, continuous distributions. It has several
<   speed, accuracy, memory, and interface advantages compared to the
<   previous infrastructure. See [`rv_infrastructure`](https://scipy.github.io/devdocs/tutorial/stats/rv_infrastructure.html) for a tutorial.
---
> -   All functions in [`scipy.differentiate`](https://scipy.github.io/devdocs/reference/differentiate.html#module-scipy.differentiate) (new sub-package)
> -   All functions in [`scipy.optimize.elementwise`](https://scipy.github.io/devdocs/reference/optimize.elementwise.html#module-scipy.optimize.elementwise) (new namespace)
> -   [`scipy.optimize.rosen`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.rosen.html#scipy.optimize.rosen), [`scipy.optimize.rosen_der`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.rosen_der.html#scipy.optimize.rosen_der), and [`scipy.optimize.rosen_hess`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.rosen_hess.html#scipy.optimize.rosen_hess)
> -   [`scipy.special.logsumexp`](https://scipy.github.io/devdocs/reference/generated/scipy.special.logsumexp.html#scipy.special.logsumexp)
> -   [`scipy.integrate.trapezoid`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.trapezoid.html#scipy.integrate.trapezoid)
> -   [`scipy.integrate.tanhsinh`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.tanhsinh.html#scipy.integrate.tanhsinh) (newly public function)
> -   [`scipy.integrate.cubature`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.cubature.html#scipy.integrate.cubature) (new function)
> -   [`scipy.integrate.nsum`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.nsum.html#scipy.integrate.nsum) (new function)
> -   [`scipy.special.chdtr`](https://scipy.github.io/devdocs/reference/generated/scipy.special.chdtr.html#scipy.special.chdtr), [`scipy.special.betainc`](https://scipy.github.io/devdocs/reference/generated/scipy.special.betainc.html#scipy.special.betainc), and [`scipy.special.betaincc`](https://scipy.github.io/devdocs/reference/generated/scipy.special.betaincc.html#scipy.special.betaincc)
> -   [`scipy.stats.boxcox_llf`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf)
> -   [`scipy.stats.differential_entropy`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.differential_entropy.html#scipy.stats.differential_entropy)
> -   [`scipy.stats.zmap`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.zmap.html#scipy.stats.zmap), [`scipy.stats.zscore`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.zscore.html#scipy.stats.zscore), and [`scipy.stats.gzscore`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.gzscore.html#scipy.stats.gzscore)
> -   [`scipy.stats.tmean`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tmean.html#scipy.stats.tmean), [`scipy.stats.tvar`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tvar.html#scipy.stats.tvar), [`scipy.stats.tstd`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tstd.html#scipy.stats.tstd), [`scipy.stats.tsem`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tsem.html#scipy.stats.tsem), [`scipy.stats.tmin`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tmin.html#scipy.stats.tmin), and [`scipy.stats.tmax`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.tmax.html#scipy.stats.tmax)
> -   [`scipy.stats.gmean`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.gmean.html#scipy.stats.gmean), [`scipy.stats.hmean`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.hmean.html#scipy.stats.hmean) and [`scipy.stats.pmean`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.pmean.html#scipy.stats.pmean)
> -   [`scipy.stats.combine_pvalues`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.combine_pvalues.html#scipy.stats.combine_pvalues)
> -   [`scipy.stats.ttest_ind`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind), [`scipy.stats.ttest_rel`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.ttest_rel.html#scipy.stats.ttest_rel)
> -   [`scipy.stats.directional_stats`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.directional_stats.html#scipy.stats.directional_stats)
> -   [`scipy.ndimage`](https://scipy.github.io/devdocs/reference/ndimage.html#module-scipy.ndimage) functions will now delegate to `cupyx.scipy.ndimage`, and for other backends will transit via NumPy arrays on the host.
250,259c171
<   - Use `scipy.stats.make_distribution` to treat an existing continuous
<     distribution (e.g. `scipy.stats.norm`) with the new infrastructure.
<     This can improve the speed and accuracy of existing distributions,
<     especially those with methods not overridden with distribution-specific
<     formulas.
<   - `scipy.stats.Normal` and `scipy.stats.Uniform` are pre-defined classes
<     to represent the normal and uniform distributions, respectively.
<     Their interfaces may be faster and more convenient than those produced by
<     ``make_distribution``.
<   - `scipy.stats.Mixture` can be used to represent mixture distributions.
---
> ## Deprecated features and future changes
261,263c173,185
< - Instances of `scipy.stats.Normal`, `scipy.stats.Uniform`, and the classes
<   returned by `scipy.stats.make_distribution` are supported by several new
<   mathematical transformations.
---
> -   Functions [`scipy.linalg.interpolative.rand`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.interpolative.rand.html#scipy.linalg.interpolative.rand) and [`scipy.linalg.interpolative.seed`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.interpolative.seed.html#scipy.linalg.interpolative.seed) have been deprecated and will be removed in SciPy `1.17.0`.
> -   Complex inputs to [`scipy.spatial.distance.cosine`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.distance.cosine.html#scipy.spatial.distance.cosine) and [`scipy.spatial.distance.correlation`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.distance.correlation.html#scipy.spatial.distance.correlation) have been deprecated and will raise an error in SciPy `1.17.0`.
> -   [`scipy.spatial.distance.kulczynski1`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.distance.kulczynski1.html#scipy.spatial.distance.kulczynski1) and [`scipy.spatial.distance.sokalmichener`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.distance.sokalmichener.html#scipy.spatial.distance.sokalmichener) were deprecated and will be removed in SciPy `1.17.0`.
> -   [`scipy.stats.find_repeats`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.find_repeats.html#scipy.stats.find_repeats) is deprecated and will be removed in SciPy `1.17.0`. Please use `numpy.unique`/`numpy.unique_counts` instead.
> -   [`scipy.linalg.kron`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.kron.html#scipy.linalg.kron) is deprecated in favour of `numpy.kron`.
> -   Using object arrays and longdouble arrays in [`scipy.signal`](https://scipy.github.io/devdocs/reference/signal.html#module-scipy.signal) convolution/correlation functions ([`scipy.signal.correlate`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.correlate.html#scipy.signal.correlate), [`scipy.signal.convolve`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.convolve.html#scipy.signal.convolve) and [`scipy.signal.choose_conv_method`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.choose_conv_method.html#scipy.signal.choose_conv_method)) and filtering functions ([`scipy.signal.lfilter`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.lfilter.html#scipy.signal.lfilter), [`scipy.signal.sosfilt`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt)) has been deprecated and will be removed in SciPy `1.17.0`.
> -   [`scipy.stats.linregress`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.linregress.html#scipy.stats.linregress) has deprecated one-argument use; the two variables must be specified as separate arguments.
> -   `scipy.stats.trapz` is deprecated in favor of [`scipy.stats.trapezoid`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.trapezoid.html#scipy.stats.trapezoid).
> -   [`scipy.special.lpn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.lpn.html#scipy.special.lpn) is deprecated in favor of [`scipy.special.legendre_p_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.legendre_p_all.html#scipy.special.legendre_p_all).
> -   [`scipy.special.lpmn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.lpmn.html#scipy.special.lpmn) and [`scipy.special.clpmn`](https://scipy.github.io/devdocs/reference/generated/scipy.special.clpmn.html#scipy.special.clpmn) are deprecated in favor of [`scipy.special.assoc_legendre_p_all`](https://scipy.github.io/devdocs/reference/generated/scipy.special.assoc_legendre_p_all.html#scipy.special.assoc_legendre_p_all).
> -   [`scipy.special.sph_harm`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_harm.html#scipy.special.sph_harm) has been deprecated in favor of [`scipy.special.sph_harm_y`](https://scipy.github.io/devdocs/reference/generated/scipy.special.sph_harm_y.html#scipy.special.sph_harm_y).
> -   Multi-dimensional `r` and `c` arrays passed to [`scipy.linalg.toeplitz`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.toeplitz.html#scipy.linalg.toeplitz), [`scipy.linalg.matmul_toeplitz`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.matmul_toeplitz.html#scipy.linalg.matmul_toeplitz), or [`scipy.linalg.solve_toeplitz`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.solve_toeplitz.html#scipy.linalg.solve_toeplitz) will be treated as batches of 1-D coefficients beginning in SciPy `1.17.0`.
> -   The `random_state` and `permutations` arguments of [`scipy.stats.ttest_ind`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind) are deprecated. Use `method` to perform a permutation test, instead.
265,270c187
<   - `scipy.stats.truncate` for truncation of the support.
<   - `scipy.stats.order_statistic` for the order statistics of a given number
<     of IID random variables.
<   - `scipy.stats.abs`, `scipy.stats.exp`, and `scipy.stats.log`. For example,
<     ``scipy.stats.abs(Normal())`` is distributed according to the folded normal
<     and ``scipy.stats.exp(Normal())`` is lognormally distributed.
---
> ## Expired Deprecations
272,282c189,198
< - The new `scipy.stats.lmoment` calculates sample l-moments and l-moment
<   ratios. Notably, these sample estimators are unbiased.
< - `scipy.stats.chatterjeexi` computes the Xi correlation coefficient, which
<   can detect nonlinear dependence. The function also performs a hypothesis
<   test of independence between samples.
< - `scipy.stats.wilcoxon` has improved method resolution logic for the default
<   ``method='auto'``. Other values of ``method`` provided by the user are now
<   respected in all cases, and the method argument ``approx`` has been
<   renamed to ``asymptotic`` for consistency with similar functions. (Use of
<   ``approx`` is still allowed for backward compatibility.)
< - There are several new probability distributions:
---
> -   The wavelet functions in [`scipy.signal`](https://scipy.github.io/devdocs/reference/signal.html#module-scipy.signal) have been removed. This includes `daub`, `qmf`, `cascade`, `morlet`, `morlet2`, `ricker`, and `cwt`. Users should use `pywavelets` instead.
> -   `scipy.signal.cmplx_sort` has been removed.
> -   `scipy.integrate.quadrature` and `scipy.integrate.romberg` have been removed in favour of [`scipy.integrate.quad`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad).
> -   `scipy.stats.rvs_ratio_uniforms` has been removed in favor of [`scipy.stats.sampling.RatioUniforms`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.sampling.RatioUniforms.html#scipy.stats.sampling.RatioUniforms).
> -   [`scipy.special.factorial`](https://scipy.github.io/devdocs/reference/generated/scipy.special.factorial.html#scipy.special.factorial) now raises an error for non-integer scalars when `exact=True`.
> -   [`scipy.integrate.cumulative_trapezoid`](https://scipy.github.io/devdocs/reference/generated/scipy.integrate.cumulative_trapezoid.html#scipy.integrate.cumulative_trapezoid) now raises an error for values of `initial` other than `0` and `None`.
> -   Complex dtypes now raise an error in [`scipy.interpolate.Akima1DInterpolator`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.Akima1DInterpolator.html#scipy.interpolate.Akima1DInterpolator) and [`scipy.interpolate.PchipInterpolator`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy.interpolate.PchipInterpolator)
> -   `special.btdtr` and `special.btdtri` have been removed.
> -   The default of the `exact=` kwarg in `special.factorialk` has changed from `True` to `False`.
> -   All functions in the `scipy.misc` submodule have been removed.
284,289c200
<   - `scipy.stats.dpareto_lognorm` represents the double Pareto lognormal
<     distribution.
<   - `scipy.stats.landau` represents the Landau distribution.
<   - `scipy.stats.normal_inverse_gamma` represents the normal-inverse-gamma
<     distribution.
<   - `scipy.stats.poisson_binom` represents the Poisson binomial distribution.
---
> ## Backwards incompatible changes
291,297c202,204
< - Batch calculation with `scipy.stats.alexandergovern` and
<   `scipy.stats.combine_pvalues` is faster.
< - `scipy.stats.chisquare` added an argument ``sum_check``. By default, the
<   function raises an error when the sum of expected and obseved frequencies
<   are not equal; setting ``sum_check=False`` disables this check to
<   facilitate hypothesis tests other than Pearson's chi-squared test.
< - The accuracy of several distribution methods has been improved, including:
---
> -   `interpolate.BSpline.integrate` output is now always a numpy array. Previously, for 1D splines the output was a python float or a 0D array depending on the value of the `extrapolate` argument.
> -   [`scipy.stats.wilcoxon`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.wilcoxon.html#scipy.stats.wilcoxon) now respects the `method` argument provided by the user. Previously, even if `method='exact'` was specified, the function would resort to `method='approx'` in some cases.
> -   `scipy.integrate.AccuracyWarning` has been removed as the functions the warning was emitted from (`scipy.integrate.quadrature` and `scipy.integrate.romberg`) have been removed.
299,310c206
<   - `scipy.stats.nct` method ``pdf``
<   - `scipy.stats.crystalball` method ``sf``
<   - `scipy.stats.geom` method ``rvs``
<   - `scipy.stats.cauchy` methods ``logpdf``, ``pdf``, ``ppf`` and ``isf``
<   - The ``logcdf`` and/or ``logsf`` methods of distributions that do not
<     override the generic implementation of these methods, including
<     `scipy.stats.beta`, `scipy.stats.betaprime`, `scipy.stats.cauchy`,
<     `scipy.stats.chi`, `scipy.stats.chi2`, `scipy.stats.exponweib`,
<     `scipy.stats.gamma`, `scipy.stats.gompertz`, `scipy.stats.halflogistic`,
<     `scipy.stats.hypsecant`, `scipy.stats.invgamma`, `scipy.stats.laplace`,
<     `scipy.stats.levy`, `scipy.stats.loggamma`, `scipy.stats.maxwell`,
<     `scipy.stats.nakagami`, and `scipy.stats.t`.
---
> ## Other changes
312,315c208,219
< - `scipy.stats.qmc.PoissonDisk` now accepts lower and upper bounds
<   parameters ``l_bounds`` and ``u_bounds``.
< - `scipy.stats.fisher_exact` now supports two-dimensional tables with shapes
<   other than ``(2, 2)``.
---
> -   A separate accompanying type stubs package, `scipy-stubs`, will be made available with the `1.15.0` release. [Installation instructions are available](https://github.com/jorenham/scipy-stubs?tab=readme-ov-file#installation).
> -   [`scipy.stats.bootstrap`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap) now emits a `FutureWarning` if the shapes of the input arrays do not agree. Broadcast the arrays to the same batch shape (i.e. for all dimensions except those specified by the `axis` argument) to avoid the warning. Broadcasting will be performed automatically in the future.
> -   SciPy endorsed [SPEC-7](https://scientific-python.org/specs/spec-0007/), which proposes a `rng` argument to control pseudorandom number generation (PRNG) in a standard way, replacing legacy arguments like `seed` and `random_sate`. In many cases, use of `rng` will change the behavior of the function unless the argument is already an instance of `numpy.random.Generator`.
>     -   Effective in SciPy `1.15.0`:
>         -   The `rng` argument has been added to the following functions: [`scipy.cluster.vq.kmeans`](https://scipy.github.io/devdocs/reference/generated/scipy.cluster.vq.kmeans.html#scipy.cluster.vq.kmeans), [`scipy.cluster.vq.kmeans2`](https://scipy.github.io/devdocs/reference/generated/scipy.cluster.vq.kmeans2.html#scipy.cluster.vq.kmeans2), [`scipy.interpolate.BarycentricInterpolator`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.BarycentricInterpolator.html#scipy.interpolate.BarycentricInterpolator), [`scipy.interpolate.barycentric_interpolate`](https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.barycentric_interpolate.html#scipy.interpolate.barycentric_interpolate), [`scipy.linalg.clarkson_woodruff_transform`](https://scipy.github.io/devdocs/reference/generated/scipy.linalg.clarkson_woodruff_transform.html#scipy.linalg.clarkson_woodruff_transform), [`scipy.optimize.basinhopping`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.basinhopping.html#scipy.optimize.basinhopping), [`scipy.optimize.differential_evolution`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution), [`scipy.optimize.dual_annealing`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.dual_annealing.html#scipy.optimize.dual_annealing), [`scipy.optimize.check_grad`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.check_grad.html#scipy.optimize.check_grad), [`scipy.optimize.quadratic_assignment`](https://scipy.github.io/devdocs/reference/generated/scipy.optimize.quadratic_assignment.html#scipy.optimize.quadratic_assignment), [`scipy.sparse.random`](https://scipy.github.io/devdocs/reference/generated/scipy.sparse.random.html#scipy.sparse.random), [`scipy.sparse.random_array`](https://scipy.github.io/devdocs/reference/generated/scipy.sparse.random_array.html#scipy.sparse.random_array), [`scipy.sparse.rand`](https://scipy.github.io/devdocs/reference/generated/scipy.sparse.rand.html#scipy.sparse.rand), [`scipy.sparse.linalg.svds`](https://scipy.github.io/devdocs/reference/generated/scipy.sparse.linalg.svds.html#scipy.sparse.linalg.svds), [`scipy.spatial.transform.Rotation.random`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.transform.Rotation.random.html#scipy.spatial.transform.Rotation.random), [`scipy.spatial.distance.directed_hausdorff`](https://scipy.github.io/devdocs/reference/generated/scipy.spatial.distance.directed_hausdorff.html#scipy.spatial.distance.directed_hausdorff), [`scipy.stats.goodness_of_fit`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.goodness_of_fit.html#scipy.stats.goodness_of_fit), [`scipy.stats.BootstrapMethod`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.BootstrapMethod.html#scipy.stats.BootstrapMethod), [`scipy.stats.PermutationMethod`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.PermutationMethod.html#scipy.stats.PermutationMethod), [`scipy.stats.bootstrap`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap), [`scipy.stats.permutation_test`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test), [`scipy.stats.dunnett`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.dunnett.html#scipy.stats.dunnett), all [`scipy.stats.qmc`](https://scipy.github.io/devdocs/reference/stats.qmc.html#module-scipy.stats.qmc) classes that consume random numbers, and [`scipy.stats.sobol_indices`](https://scipy.github.io/devdocs/reference/generated/scipy.stats.sobol_indices.html#scipy.stats.sobol_indices).
>         -   When passed by keyword, the `rng` argument will follow the SPEC 7 standard behavior: the argument will be normalized with `np.random.default_rng` before being used.
>         -   When passed by position or legacy keyword, the behavior of the argument will remain unchanged (for now).
>     -   It is planned that in `1.17.0` the legacy argument will start emitting warnings, and that in `1.19.0` the default behavior will change.
>     -   In all cases, users can avoid future disruption by proactively passing an instance of `np.random.Generator` by keyword `rng`. For details, see [SPEC-7](https://scientific-python.org/specs/spec-0007/).
> -   The SciPy build no longer adds `-std=legacy` for Fortran code, except when using Gfortran. This avoids problems with the new Flang and AMD Fortran compilers. It may make new build warnings appear for other compilers - if so, please file an issue.
> -   `scipy.signal.sosfreqz` has been renamed to [`scipy.signal.freqz_sos`](https://scipy.github.io/devdocs/reference/generated/scipy.signal.freqz_sos.html#scipy.signal.freqz_sos). New code should use the new name. The old name is maintained as an alias for backwards compatibility.
> -   Testing thread-safety improvements related to Python `3.13t` have been made in: [`scipy.special`](https://scipy.github.io/devdocs/reference/special.html#module-scipy.special), [`scipy.spatial`](https://scipy.github.io/devdocs/reference/spatial.html#module-scipy.spatial), [`scipy.sparse`](https://scipy.github.io/devdocs/reference/sparse.html#module-scipy.sparse), [`scipy.interpolate`](https://scipy.github.io/devdocs/reference/interpolate.html#module-scipy.interpolate).
317,327c221
< Preliminary Support for Free-Threaded CPython 3.13
< ==================================================
< SciPy ``1.15`` has preliminary support for the free-threaded build of CPython
< ``3.13.`` This allows SciPy functionality to execute in parallel with Python
< threads
< (see the ``threading`` stdlib module). This support was enabled by fixing a
< significant number of thread-safety issues in both pure Python and
< C/C++/Cython/Fortran extension modules. Wheels are provided on PyPI for this
< release; NumPy ``>=2.1.3`` is required at runtime. Note that building for a
< free-threaded interpreter requires a recent pre-release or nightly for Cython
< ``3.1.0``.
---
> ## Authors (commits)
329,330c223,371
< Support for free-threaded Python does not mean that SciPy is fully thread-safe.
< Please see [`scipy_thread_safety`](https://scipy.github.io/devdocs/tutorial/thread_safety.html) for more details.
---
> -   endolith (4)
> -   h-vetinari (62)
> -   a-drenaline (1) +
> -   Afleloup (1) +
> -   Ahmad Alkadri (1) +
> -   Luiz Eduardo Amaral (3) +
> -   Virgile Andreani (3)
> -   Isaac Alonso Asensio (2) +
> -   Matteo Bachetti (1) +
> -   Arash Badie-Modiri (1) +
> -   Arnaud Baguet (1) +
> -   Soutrik Bandyopadhyay (1) +
> -   Ankit Barik (1) +
> -   Christoph Baumgarten (1)
> -   Nickolai Belakovski (3)
> -   Krishan Bhasin (1) +
> -   Jake Bowhay (89)
> -   Michael Bratsch (2) +
> -   Matthew Brett (1)
> -   Keith Briggs (1) +
> -   Olly Britton (145) +
> -   Dietrich Brunn (11)
> -   Clemens Brunner (1)
> -   Evgeni Burovski (185)
> -   Matthias Bussonnier (7)
> -   CJ Carey (32)
> -   Cesar Carrasco (4) +
> -   Hood Chatham (1)
> -   Aadya Chinubhai (1)
> -   Alessandro Chitarrini (1) +
> -   Thibault de Coincy (1) +
> -   Lucas Colley (217)
> -   Martin Diehl (1) +
> -   Djip007 (1) +
> -   Kevin Doshi (2) +
> -   Michael Dunphy (2)
> -   Andy Everall (1) +
> -   Thomas J. Fan (2)
> -   fancidev (60)
> -   Sergey Fedorov (2) +
> -   Sahil Garje (1) +
> -   Gabriel Gerlero (2)
> -   Yotam Gingold (1) +
> -   Ralf Gommers (111)
> -   Rohit Goswami (62)
> -   Anil Gurses (1) +
> -   Oscar Gustafsson (1) +
> -   Matt Haberland (392)
> -   Matt Hall (1) +
> -   Joren Hammudoglu (6) +
> -   CY Han (1) +
> -   Daniel Isaac (4) +
> -   Maxim Ivanov (1)
> -   Jakob Jakobson (2)
> -   Janez Demšar (4) +
> -   Chris Jerdonek (2) +
> -   Adam Jones (4) +
> -   Aditi Juneja (1) +
> -   Nuri Jung (1) +
> -   Guus Kamphuis (1) +
> -   Aditya Karumanchi (2) +
> -   Robert Kern (5)
> -   Agriya Khetarpal (11)
> -   Andrew Knyazev (7)
> -   Gideon Genadi Kogan (1) +
> -   Damien LaRocque (1) +
> -   Eric Larson (10)
> -   Gregory R. Lee (4)
> -   Linfye (1) +
> -   Boyu Liu (1) +
> -   Drew Allan Loney (1) +
> -   Christian Lorentzen (1)
> -   Loïc Estève (2)
> -   Smit Lunagariya (1)
> -   Henry Lunn (1) +
> -   Marco Maggi (4)
> -   Lauren Main (1) +
> -   Martin Spišák (1) +
> -   Mateusz Sokół (4)
> -   Jan-Kristian Mathisen (1) +
> -   Nikolay Mayorov (2)
> -   Nicholas McKibben (1)
> -   Melissa Weber Mendonça (62)
> -   João Mendes (10)
> -   Gian Marco Messa (1) +
> -   Samuel Le Meur-Diebolt (1) +
> -   Michał Górny (2)
> -   Naoto Mizuno (2)
> -   Nicolas Mokus (2)
> -   musvaage (18) +
> -   Andrew Nelson (88)
> -   Jens Hedegaard Nielsen (1) +
> -   Roman Nigmatullin (8) +
> -   Nick ODell (37)
> -   Yagiz Olmez (4)
> -   Matti Picus (9)
> -   Diogo Pires (5) +
> -   Ilhan Polat (96)
> -   Zachary Potthoff (1) +
> -   Tom M. Ragonneau (2)
> -   Peter Ralph (1) +
> -   Stephan Rave (1) +
> -   Tyler Reddy (192)
> -   redha2404 (2) +
> -   Ritvik1sharma (1) +
> -   Érico Nogueira Rolim (1) +
> -   Heshy Roskes (1)
> -   Pamphile Roy (34)
> -   Mikhail Ryazanov (1) +
> -   Sina Saber (1) +
> -   Atsushi Sakai (1)
> -   Clemens Schmid (1) +
> -   Daniel Schmitz (17)
> -   Moritz Schreiber (1) +
> -   Dan Schult (91)
> -   Searchingdays (1) +
> -   Matias Senger (1) +
> -   Scott Shambaugh (1)
> -   Zhida Shang (1) +
> -   Sheila-nk (4)
> -   Romain Simon (2) +
> -   Gagandeep Singh (31)
> -   Albert Steppi (40)
> -   Kai Striega (1)
> -   Anushka Suyal (143) +
> -   Alex Szatmary (1)
> -   Svetlin Tassev (1) +
> -   Ewout ter Hoeven (1)
> -   Tibor Völcker (4) +
> -   Kanishk Tiwari (1) +
> -   Yusuke Toyama (1) +
> -   Edgar Andrés Margffoy Tuay (124)
> -   Adam Turner (2) +
> -   Nicole Vadot (1) +
> -   Andrew Valentine (1)
> -   Christian Veenhuis (2)
> -   vfdev (2) +
> -   Pauli Virtanen (2)
> -   Simon Waldherr (1) +
> -   Stefan van der Walt (2)
> -   Warren Weckesser (23)
> -   Anreas Weh (1)
> -   Benoît Wygas (2) +
> -   Pavadol Yamsiri (3) +
> -   ysard (1) +
> -   Xiao Yuan (2)
> -   Irwin Zaid (12)
> -   Gang Zhao (1)
> -   ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh) (10)
332,338c373
< If you are interested in free-threaded Python, for example because you have a
< multiprocessing-based workflow that you are interested in running with Python
< threads, we encourage testing and experimentation. If you run into problems
< that you suspect are because of SciPy, please open an issue, checking first if
< the bug also occurs in the "regular" non-free-threaded CPython ``3.13`` build.
< Many threading bugs can also occur in code that releases the GIL; disabling
< the GIL only makes it easier to hit threading bugs.
---
> A total of 149 people contributed to this release. People with a "+" by their names contributed a patch for the first time. This list of names is automatically generated, and may not be fully complete.
340,660d374
< 
< Array API Standard Support
< ======================
< Experimental support for array libraries other than NumPy has been added to
< existing sub-packages in recent versions of SciPy. Please consider testing
< these features by setting an environment variable ``SCIPY_ARRAY_API=1`` and
< providing PyTorch, JAX, ndonnx, or CuPy arrays as array arguments. Features
< with support added for SciPy ``1.15.0`` include:
< 
< - All functions in `scipy.differentiate` (new sub-package)
< - All functions in `scipy.optimize.elementwise` (new namespace)
< - `scipy.optimize.rosen`, `scipy.optimize.rosen_der`, and
<   `scipy.optimize.rosen_hess`
< - `scipy.special.logsumexp`
< - `scipy.integrate.trapezoid`
< - `scipy.integrate.tanhsinh` (newly public function)
< - `scipy.integrate.cubature` (new function)
< - `scipy.integrate.nsum` (new function)
< - `scipy.special.chdtr`, `scipy.special.betainc`, and `scipy.special.betaincc`
< - `scipy.stats.boxcox_llf`
< - `scipy.stats.differential_entropy`
< - `scipy.stats.zmap`, `scipy.stats.zscore`, and `scipy.stats.gzscore`
< - `scipy.stats.tmean`, `scipy.stats.tvar`, `scipy.stats.tstd`,
<   `scipy.stats.tsem`, `scipy.stats.tmin`, and `scipy.stats.tmax`
< - `scipy.stats.gmean`, `scipy.stats.hmean` and `scipy.stats.pmean`
< - `scipy.stats.combine_pvalues`
< - `scipy.stats.ttest_ind`, `scipy.stats.ttest_rel`
< - `scipy.stats.directional_stats`
< - `scipy.ndimage` functions will now delegate to ``cupyx.scipy.ndimage``,
<   and for other backends will transit via NumPy arrays on the host.
< 
< 
< Deprecated features and future changes
< ===============================
< - Functions `scipy.linalg.interpolative.rand` and
<   `scipy.linalg.interpolative.seed` have been deprecated and will be removed
<   in SciPy ``1.17.0``.
< - Complex inputs to `scipy.spatial.distance.cosine` and
<   `scipy.spatial.distance.correlation` have been deprecated and will raise
<   an error in SciPy ``1.17.0``.
< - `scipy.spatial.distance.kulczynski1` and
<   `scipy.spatial.distance.sokalmichener` were deprecated and will be removed
<   in SciPy ``1.17.0``.
< - `scipy.stats.find_repeats` is deprecated and will be
<   removed in SciPy ``1.17.0``. Please use
<   ``numpy.unique``/``numpy.unique_counts`` instead.
< - `scipy.linalg.kron` is deprecated in favour of ``numpy.kron``.
< - Using object arrays and longdouble arrays in `scipy.signal`
<   convolution/correlation functions (`scipy.signal.correlate`,
<   `scipy.signal.convolve` and `scipy.signal.choose_conv_method`) and
<   filtering functions (`scipy.signal.lfilter`, `scipy.signal.sosfilt`) has
<   been deprecated and will be removed in SciPy ``1.17.0``.
< - `scipy.stats.linregress` has deprecated one-argument use; the two
<   variables must be specified as separate arguments.
< - ``scipy.stats.trapz`` is deprecated in favor of `scipy.stats.trapezoid`.
< - `scipy.special.lpn` is deprecated in favor of `scipy.special.legendre_p_all`.
< - `scipy.special.lpmn` and `scipy.special.clpmn` are deprecated in favor of
<   `scipy.special.assoc_legendre_p_all`.
< - `scipy.special.sph_harm` has been deprecated in favor of
<   `scipy.special.sph_harm_y`.
< - Multi-dimensional ``r`` and ``c`` arrays passed to `scipy.linalg.toeplitz`,
<   `scipy.linalg.matmul_toeplitz`, or `scipy.linalg.solve_toeplitz` will be
<   treated as batches of 1-D coefficients beginning in SciPy ``1.17.0``.
< - The ``random_state`` and ``permutations`` arguments of
<   `scipy.stats.ttest_ind` are deprecated. Use ``method`` to perform a
<   permutation test, instead.
< 
< 
< Expired Deprecations
< =================
< - The wavelet functions in `scipy.signal` have been removed. This includes
<   ``daub``, ``qmf``, ``cascade``, ``morlet``, ``morlet2``, ``ricker``,
<   and ``cwt``. Users should use ``pywavelets`` instead.
< - ``scipy.signal.cmplx_sort`` has been removed.
< - ``scipy.integrate.quadrature`` and ``scipy.integrate.romberg`` have been
<   removed in favour of `scipy.integrate.quad`.
< - ``scipy.stats.rvs_ratio_uniforms`` has been removed in favor of
<   `scipy.stats.sampling.RatioUniforms`.
< - `scipy.special.factorial` now raises an error for non-integer scalars when
<   ``exact=True``.
< - `scipy.integrate.cumulative_trapezoid` now raises an error for values of
<   ``initial`` other than ``0`` and ``None``.
< - Complex dtypes now raise an error in `scipy.interpolate.Akima1DInterpolator`
<   and `scipy.interpolate.PchipInterpolator`
< - ``special.btdtr`` and ``special.btdtri`` have been removed.
< - The default of the ``exact=`` kwarg in ``special.factorialk`` has changed
<   from ``True`` to ``False``.
< - All functions in the ``scipy.misc`` submodule have been removed.
< 
< 
< Backwards incompatible changes
< ==========================
< - ``interpolate.BSpline.integrate`` output is now always a numpy array.
<   Previously, for 1D splines the output was a python float or a 0D array
<   depending on the value of the ``extrapolate`` argument.
< - `scipy.stats.wilcoxon` now respects the ``method`` argument provided by the
<   user. Previously, even if ``method='exact'`` was specified, the function
<   would resort to ``method='approx'`` in some cases.
< - ``scipy.integrate.AccuracyWarning`` has been removed as the functions the
<   warning was emitted from (``scipy.integrate.quadrature`` and
<   ``scipy.integrate.romberg``) have been removed.
< 
< 
< Other changes
< ============
< - A separate accompanying type stubs package, ``scipy-stubs``, will be made
<   available with the ``1.15.0`` release. [Installation instructions are
<   available](https://github.com/jorenham/scipy-stubs?tab=readme-ov-file#installation).
< - `scipy.stats.bootstrap` now emits a ``FutureWarning`` if the shapes of the
<   input arrays do not agree. Broadcast the arrays to the same batch shape
<   (i.e. for all dimensions except those specified by the ``axis`` argument)
<   to avoid the warning. Broadcasting will be performed automatically in the
<   future.
< - SciPy endorsed [SPEC-7](https://scientific-python.org/specs/spec-0007),
<   which proposes a ``rng`` argument to control pseudorandom number generation
<   (PRNG) in a standard way, replacing legacy arguments like ``seed`` and
<   ``random_sate``. In many cases, use of ``rng`` will change the behavior of
<   the function unless the argument is already an instance of
<   ``numpy.random.Generator``.
< 
<   - Effective in SciPy ``1.15.0``:
< 
<     - The ``rng`` argument has been added to the following functions:
<       `scipy.cluster.vq.kmeans`, `scipy.cluster.vq.kmeans2`,
<       `scipy.interpolate.BarycentricInterpolator`,
<       `scipy.interpolate.barycentric_interpolate`,
<       `scipy.linalg.clarkson_woodruff_transform`,
<       `scipy.optimize.basinhopping`,
<       `scipy.optimize.differential_evolution`, `scipy.optimize.dual_annealing`,
<       `scipy.optimize.check_grad`, `scipy.optimize.quadratic_assignment`,
<       `scipy.sparse.random`, `scipy.sparse.random_array`, `scipy.sparse.rand`,
<       `scipy.sparse.linalg.svds`, `scipy.spatial.transform.Rotation.random`,
<       `scipy.spatial.distance.directed_hausdorff`,
<       `scipy.stats.goodness_of_fit`, `scipy.stats.BootstrapMethod`,
<       `scipy.stats.PermutationMethod`, `scipy.stats.bootstrap`,
<       `scipy.stats.permutation_test`, `scipy.stats.dunnett`, all
<       `scipy.stats.qmc` classes that consume random numbers, and
<       `scipy.stats.sobol_indices`.
<     - When passed by keyword, the ``rng`` argument will follow the SPEC 7
<       standard behavior: the argument will be normalized with
<       ``np.random.default_rng`` before being used.
<     - When passed by position or legacy keyword, the behavior of the argument
<       will remain unchanged (for now).
< 
<   - It is planned that in ``1.17.0`` the legacy argument will start emitting
<     warnings, and that in ``1.19.0`` the default behavior will change.
<   - In all cases, users can avoid future disruption by proactively passing
<     an instance of ``np.random.Generator`` by keyword ``rng``. For details,
<     see [SPEC-7](https://scientific-python.org/specs/spec-0007/).
< 
< - The SciPy build no longer adds ``-std=legacy`` for Fortran code,
<   except when using Gfortran. This avoids problems with the new Flang and
<   AMD Fortran compilers. It may make new build warnings appear for other
<   compilers - if so, please file an issue.
< 
< 
< - ``scipy.signal.sosfreqz`` has been renamed to `scipy.signal.freqz_sos`.
<   New code should use the new name. The old name is maintained as an alias for
<   backwards compatibility.
< - Testing thread-safety improvements related to Python ``3.13t`` have been
<   made in: `scipy.special`, `scipy.spatial`, `scipy.sparse`,
<   `scipy.interpolate`.
< 
< 
< 
< Authors (commits)
< ==============
< 
< * endolith (4)
< * h-vetinari (62)
< * a-drenaline (1) +
< * Afleloup (1) +
< * Ahmad Alkadri (1) +
< * Luiz Eduardo Amaral (3) +
< * Virgile Andreani (3)
< * Isaac Alonso Asensio (2) +
< * Matteo Bachetti (1) +
< * Arash Badie-Modiri (1) +
< * Arnaud Baguet (1) +
< * Soutrik Bandyopadhyay (1) +
< * Ankit Barik (1) +
< * Christoph Baumgarten (1)
< * Nickolai Belakovski (3)
< * Krishan Bhasin (1) +
< * Jake Bowhay (89)
< * Michael Bratsch (2) +
< * Matthew Brett (1)
< * Keith Briggs (1) +
< * Olly Britton (145) +
< * Dietrich Brunn (11)
< * Clemens Brunner (1)
< * Evgeni Burovski (185)
< * Matthias Bussonnier (7)
< * CJ Carey (32)
< * Cesar Carrasco (4) +
< * Hood Chatham (1)
< * Aadya Chinubhai (1)
< * Alessandro Chitarrini (1) +
< * Thibault de Coincy (1) +
< * Lucas Colley (217)
< * Martin Diehl (1) +
< * Djip007 (1) +
< * Kevin Doshi (2) +
< * Michael Dunphy (2)
< * Andy Everall (1) +
< * Thomas J. Fan (2)
< * fancidev (60)
< * Sergey Fedorov (2) +
< * Sahil Garje (1) +
< * Gabriel Gerlero (2)
< * Yotam Gingold (1) +
< * Ralf Gommers (111)
< * Rohit Goswami (62)
< * Anil Gurses (1) +
< * Oscar Gustafsson (1) +
< * Matt Haberland (392)
< * Matt Hall (1) +
< * Joren Hammudoglu (6) +
< * CY Han (1) +
< * Daniel Isaac (4) +
< * Maxim Ivanov (1)
< * Jakob Jakobson (2)
< * Janez Demšar (4) +
< * Chris Jerdonek (2) +
< * Adam Jones (4) +
< * Aditi Juneja (1) +
< * Nuri Jung (1) +
< * Guus Kamphuis (1) +
< * Aditya Karumanchi (2) +
< * Robert Kern (5)
< * Agriya Khetarpal (11)
< * Andrew Knyazev (7)
< * Gideon Genadi Kogan (1) +
< * Damien LaRocque (1) +
< * Eric Larson (10)
< * Gregory R. Lee (4)
< * Linfye (1) +
< * Boyu Liu (1) +
< * Drew Allan Loney (1) +
< * Christian Lorentzen (1)
< * Loïc Estève (2)
< * Smit Lunagariya (1)
< * Henry Lunn (1) +
< * Marco Maggi (4)
< * Lauren Main (1) +
< * Martin Spišák (1) +
< * Mateusz Sokół (4)
< * Jan-Kristian Mathisen (1) +
< * Nikolay Mayorov (2)
< * Nicholas McKibben (1)
< * Melissa Weber Mendonça (62)
< * João Mendes (10)
< * Gian Marco Messa (1) +
< * Samuel Le Meur-Diebolt (1) +
< * Michał Górny (2)
< * Naoto Mizuno (2)
< * Nicolas Mokus (2)
< * musvaage (18) +
< * Andrew Nelson (88)
< * Jens Hedegaard Nielsen (1) +
< * Roman Nigmatullin (8) +
< * Nick ODell (37)
< * Yagiz Olmez (4)
< * Matti Picus (9)
< * Diogo Pires (5) +
< * Ilhan Polat (96)
< * Zachary Potthoff (1) +
< * Tom M. Ragonneau (2)
< * Peter Ralph (1) +
< * Stephan Rave (1) +
< * Tyler Reddy (192)
< * redha2404 (2) +
< * Ritvik1sharma (1) +
< * Érico Nogueira Rolim (1) +
< * Heshy Roskes (1)
< * Pamphile Roy (34)
< * Mikhail Ryazanov (1) +
< * Sina Saber (1) +
< * Atsushi Sakai (1)
< * Clemens Schmid (1) +
< * Daniel Schmitz (17)
< * Moritz Schreiber (1) +
< * Dan Schult (91)
< * Searchingdays (1) +
< * Matias Senger (1) +
< * Scott Shambaugh (1)
< * Zhida Shang (1) +
< * Sheila-nk (4)
< * Romain Simon (2) +
< * Gagandeep Singh (31)
< * Albert Steppi (40)
< * Kai Striega (1)
< * Anushka Suyal (143) +
< * Alex Szatmary (1)
< * Svetlin Tassev (1) +
< * Ewout ter Hoeven (1)
< * Tibor Völcker (4) +
< * Kanishk Tiwari (1) +
< * Yusuke Toyama (1) +
< * Edgar Andrés Margffoy Tuay (124)
< * Adam Turner (2) +
< * Nicole Vadot (1) +
< * Andrew Valentine (1)
< * Christian Veenhuis (2)
< * vfdev (2) +
< * Pauli Virtanen (2)
< * Simon Waldherr (1) +
< * Stefan van der Walt (2)
< * Warren Weckesser (23)
< * Anreas Weh (1)
< * Benoît Wygas (2) +
< * Pavadol Yamsiri (3) +
< * ysard (1) +
< * Xiao Yuan (2)
< * Irwin Zaid (12)
< * Gang Zhao (1)
< * ਗਗਨਦੀਪ ਸਿੰਘ (Gagandeep Singh) (10)
< 
< A total of 149 people contributed to this release.
< People with a "+" by their names contributed a patch for the first time.
< This list of names is automatically generated, and may not be fully complete.
\ No newline at end of file
